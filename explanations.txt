Explanations for Udacity Machine Learning Engineer Nanodegree Technical Interview Questions

Question 1: Given two strings s and t, determine whether some anagram of t is a substring of s. For example if s = ‘udacity’ and t=‘ad’ then the function returns True. Your function definition should look like:

     question1(s,t) and return boolean True or False

Clarify the Question:

- The strings ’s’ and ’t’ can be any number of characters?
- Will s always be smaller than t?
- If s = ‘They were the best of times’ and t = ‘weretimes’, would t be considered a substring of s?
- If s = ‘R’ and t = ‘r’ would t be considered a substring of s?

Confirming Inputs and Outputs:

- Input: 2 strings
- Output: boolean True or False statement

Test Cases:

- None type is not a string, so I don’t think we need to consider it for our algorithm.
- If s and t were both empty strings, the algorithm would return True, since all of the elements of t are included in s.
- If t was an empty string and s was a string with elements, the algorithm would return True, since all of the elements of t are included in s.

Brainstorm:

- We could set a counter to 0 and iterate through the s string. Every time an element in s is the same as t we could add one to our counter. If the counter is equal to the number of characters in t, then return True. But if there are duplicate characters in s that are the same as a character in t they would be counted twice.
- If we iterate through s and find a match with t, we could mark a boolean variable r as True. When we are finished iterating through t and r is True, we could add one to the counter.

Runtime analysis:

- Since we need to go through each element of string s once and each element of string t once for every element of s, I believe the runtime is O(mn), where m is the number of characters in string s and n is the number of characters in string t.



