Explanations for Udacity Machine Learning Engineer Nanodegree Technical Interview Questions

Question 1: Given two strings s and t, determine whether some anagram of t is a substring of s. For example if s = ‘udacity’ and t=‘ad’ then the function returns True. Your function definition should look like:

     question1(s,t) and return boolean True or False

Clarify the Question:

- The strings ’s’ and ’t’ can be any number of characters?
- Will s always be smaller than t?
- If s = ‘They were the best of times’ and t = ‘weretimes’, would t be considered a substring of s?
- If s = ‘R’ and t = ‘r’ would t be considered a substring of s?

Confirming Inputs and Outputs:

- Input: 2 strings
- Output: boolean True or False statement

Test Cases:

- None type is not a string, so I don’t think we need to consider it for our algorithm.
- If s and t were both empty strings, the algorithm would return True, since all of the elements of t are included in s.
- If t was an empty string and s was a string with elements, the algorithm would return True, since all of the elements of t are included in s.

Brainstorm:

- We can start by making both strings lowercase, since ‘Aud’ is equivalent to ‘aud’ in this example.
-Next, if t is an empty string, we can return True, since an empty substring t is an anagram of any string s. 
-We can run a for loop for every character in the string. The for loop can check whether, for each character s[i], the sorted string of length len(t) is equal to the sorted string with character s[i] with length len(t). 

Runtime analysis:

- Since we need to go through each element of string s once, I believe the runtime is O(n), where n is the number of characters in string s.

- We don’t need to maintain any objects during the algorithm, so the space complexity is O(1).


Question 2
Given a string a, find the longest palindromic substring contained in a. Your function definition should look like question2(a), and return a string.

Clarify the question:

- If we have two or more palindromic substrings that are the longest and the same length, should our algorithm return the first substring in the string or all substrings? For the purposes of this exercise, I will assume we want the first substring.
- Is a palindromic substring is defined as a string that is equal to itself in reverse?
- Empty strings are palindromic? I will assume yes

Confirming inputs and outputs:

- Input: a string
- Output: a string

Test cases:

- None type is not a string, so I don’t think we need to consider it for our algorithm.
- Since empty strings are palindromic, if our input was an empty string our output should also be an empty string.
- If we have a string of one character, we should return a string of one character.
- If we have a string of all different characters, we should return a string of the first character.
- If we have a string that includes two different palindromes of the same length, the algorithm should output the first string.

Brainstorm:

- We could start by setting up an empty string which will represent the largest palindrome as lp.
- We could run a for loop for each ith character of the string, and a for loop for each jth subsequent character following the ith character.
- For each jth and ith character, we could setup a string where the ith character is the first and the jth character is the last. We could then reverse the string and if it is equal to the original string and the number of characters is larger than the current largest palindrome (lp), we could set that as lp.
- Once the two loops are finished, return lp

Runtime analysis:

- We need to go through each character of string s once. We also need to go through m-1 iterations for each ith character in string s, where m is the number of characters between the ith and last character, inclusive. The most we would need to go through would be n-1 for the first character, so the worst case runtime would be approximately O(n^2).
- We need to store the largest palindrome substring. The substring will never be greater than n in length, so the space complexity will be O(n).

Question 3
Given an undirected graph G, find the minimum spanning tree within G. A minimum spanning tree connects all vertices in a graph with the smallest possible total weight of edges. Your function should take in and return an adjacency list structured like this:

{'A': [('B', 2)],
 'B': [('A', 2), ('C', 5)],
 'C': [('B', 5)]}

Clarify the question:

- If there are two or more minimum spanning trees, do we produce one? Pick the first one the algorithm finds.
- If there is a graph with no nodes, would the output be an empty dictionary?

Confirming inputs and outputs:

- The input is an adjacency list in a format of a python dictionary. The keys are the nodes, and the values are lists with tuples. The 1st element is the connecting node, the 2nd element is the weight of the edge that connects the nodes.
- The output is an adjacency list with the same characteristics as the input, but will represent the minimum spanning tree.

Test cases:

- If G was an empty dictionary, the output would be an empty dictionary.
- If G had one element with no edges, it would be initialized as {‘A’ : None} for example. The output should be the same.

Brainstorm:

- We will use a greedy choice algorithm in order to find the minimum spanning algorithm.
- We can start by sorting the weights of the edges in increasing order.
- We could then iterate through the edges, starting with the edge with the smallest weight. If it forms a cycle with the spanning tree, discard it. If not, include it in the spanning tree.
- Once we have iterated through all the weights, convert the minimum spanning tree into an adjacency matrix and return it.

Runtime Analysis:

-  If E is the number of edges, we have to sort E weights. If we use the python function sorted(), it uses Timsort. Timsort is a hybrid between merge and insertion sort. Best case, it’s O(E) = E. Average and worst case, it’s O(E) = Elog(E).
- Next, we need to iterate through the edges starting with the edge with the smallest weight. Best case, we will only need to iterate through N-1 edges. Worst case, we will need to check them all. For each edge, we will need to check if it forms a cycle when added to the edges already selected for the minimum spanning tree. Best case is the cycle only contains one edge, worst case it contains all of them. So this step is approximately O(E) = E*E.
- Overall, the runtime will be O(E) = E*E + Elog(E). Since E^2 is greater than Elog(E) overall, we can approximate the runtime O(E) = E^2.
- Since the maximum amount of space that we would need to use would be an adjacency list and a list to hold the edges, our big O notation would be O(V + E + 1), where V is the number of vertices.


Question 4

Find the least common ancestor between two nodes on a binary search tree. The least common ancestor is the farthest node from the root that is an ancestor of both nodes. For example, the root is a common ancestor of all nodes on the tree, but if both nodes are descendents of the root's left child, then that left child might be the lowest common ancestor. You can assume that both nodes are in the tree, and the tree itself adheres to all BST properties. The function definition should look like question4(T, r, n1, n2), where T is the tree represented as a matrix, where the index of the list is equal to the integer stored in that node and a 1 represents a child node, r is a non-negative integer representing the root, and n1 and n2 are non-negative integers representing the two nodes in no particular order. For example, one test case might be

question4([[0, 1, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0],
          [1, 0, 0, 0, 1],
          [0, 0, 0, 0, 0]],
          3,
          1,
          4)


and the answer would be 3.

Clarify the question:

- Is a node considered an ancestor of itself?
- Can we assume that the root is in the tree?
- Looking at the example from the question, 3 is Level 1, 0 and 4 are Level 2, and 1 is Level 3?
- No values can be repeated twice for nodes?

Confirming inputs and outputs:

- The first input is a matrix, with equal numbers of rows and columns, and elements that are either 1s or 0s. If an element is a 1, the column represents the child number and the row represents the parent number. The next input is an integer which represents the root of the BST. The next two inputs are non-negative integer nodes what we have to find the common ancestor between.
- The output is a non-negative integer which represents the node that is the common ancestor between the two input nodes.

Test cases:

- A tree with only two nodes. Since n1 and n2 must both be in the algorithm, there must always be a root and therefore there must always be a non-negative integer answer.
- The test case mentioned above.
- A test case with four nodes with four levels, unbalanced.

Brainstorm:

- We can start by converting our matrix into a binary search tree by creating a class of node with three variables: value, the node to the left, and node to the right.
- We have three cases. If n1 and n2 are both less than the root, the common ancestor lies to the left of the root. If n1 and n2 are both greater than the root, the common ancestor lies to the right of the root. Otherwise, the common ancestor is the root. We can use a recursive algorithm to find our least common ancestor that keeps iterating through until the common ancestor is the root.

Runtime Analysis:

- **Not sure how to approach the runtime analysis for this problem. Any suggestions?


Question 5

Find the element in a singly linked list that's m elements from the end. For example, if a linked list has 5 elements, the 3rd element from the end is the 3rd element. The function definition should look like question5(ll, m), where ll is the first node of a linked list and m is the "mth number from the end". You should copy/paste the Node class below to use as a representation of a node in the linked list. Return the value of the node at that position.

class Node(object):
  def __init__(self, data):
    self.data = data
    self.next = None

Clarify the question:

- Can the list contain any type of objects?
- Can the list contain no objects?
- 'mth number from the end' means the mth node from the end?
- Is m always going to be less than or equal to the number of linked nodes?

Confirming inputs and outputs:

- The inputs are the first node of a linked list (ll) and an integer that has to be a number in the range of the number of elements in the chain (m) that represents the mth from the last node in the linked list.
- The output is the value of a the node at the position.

Test cases:

- A list that contains no nodes. The inputs would have to be None and 0 in that case.
- A list that contains one node. The input would have to be the name of that node and the position would have to be 1.
- A list described in the example, which is a linked list of 5 elements and we are trying to find the third element from the end.

Brainstorm:

- We can start by initializing the linked list for each of our test cases using a node class.
- We will find the total number of nodes in the list, and then subtract from it the mth to get the nth.
- Next, we can create two points, a main and a ref. We will start with both equal to the head of our linked list and initialize a count at 0. While the count is less than n, we will move the ref to ref.next and increase the count.

Runtime Analysis:

- We have to iterate through each node in the linked list at most twice. If n is the number of nodes in the linked list our big O would be O(n) = 2n, or just O(n) = n.




